// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String
  content   String   @db.Text
  authorName String
  authorPhoneNumber String?
  authorEmail String
  image     String?
  status    PostStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship to comments
  comments  Comment[]
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  status      CommentStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationship to blog post
  blogPost    BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId  String

  @@index([blogPostId, status])
}

model Admin {
  id       String @id @default(cuid())
  email    String @unique
  password String
}

model EmailVerification {
  id          String   @id @default(cuid())
  email       String
  code        String
  postData    Json     // Store the blog post data temporarily
  expiresAt   DateTime
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([email, code])
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}